import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.NodeList

import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import java.util.zip.ZipEntry
import java.util.zip.ZipFile

plugins {
    id 'com.android.application'
    id 'com.demon.plugin'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.gradletest"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}


gradle.taskGraph.beforeTask { task ->
    if (task.name.contains('mergeDebugResources')) {
        println('mergeDebugResources info: ' + task)
        if (task != null) {

            if (!project.buildDir.exists()) {
                project.buildDir.mkdir()
            }
            String saveFilePath = project.buildDir.getAbsolutePath() + "/permission_collection.csv"
            println('persmission file save path: ' + saveFilePath)
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(saveFilePath))
            project.extensions.getByName('android').applicationVariants.all { variant ->
                def name = "${variant.name}CompileClasspath"
                println(name + " dependencies")
                org.gradle.api.artifacts.Configuration configuration = project.configurations.getByName(name)
                configuration.getIncoming().files.each { dependency ->
                    if (dependency.getName().endsWith(".aar")) {
                        println("dependency: " + dependency.getAbsolutePath())
                        ZipFile zipFile = new ZipFile(dependency)
                        Enumeration<?> entries = zipFile.entries()
                        String folder = System.getProperty("java.io.tmpdir");
                        File cache = new File(folder, 'xmlcache')
                        if (!cache.isDirectory() || !cache.exists()) {
                            cache.mkdir()
                        }
                        while (entries.hasMoreElements()) {
                            ZipEntry entry = entries.nextElement()
                            if (entry.getName().equalsIgnoreCase('AndroidManifest.xml')) {
                                File xmlFile = new File(cache, entry.getName())
                                if (xmlFile.exists()) {
                                    xmlFile.delete()
                                }
                                InputStream is = zipFile.getInputStream(entry)
                                FileOutputStream fos = new FileOutputStream(xmlFile)
                                int len;
                                byte[] buf = new byte[1024];
                                while ((len = is.read(buf)) != -1) {
                                    fos.write(buf, 0, len);
                                    buf = new byte[1024]
                                }
                                // 关流顺序，先打开的后关闭
                                fos.close()
                                is.close()

                                List<String> permissionList = new ArrayList<>();
                                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()
                                try {
                                    DocumentBuilder builder = factory.newDocumentBuilder();
                                    Document d = builder.parse(xmlFile);
                                    NodeList manifestNodeList = d.getElementsByTagName("manifest");
                                    for (int i = 0; i < manifestNodeList.getLength(); i++) {
                                        Node sonNode = manifestNodeList.item(i);
                                        NodeList grandSonNodeList = sonNode.getChildNodes();
                                        for (int j = 0; j < grandSonNodeList.getLength(); j++) {
                                            Node grandSonNode = grandSonNodeList.item(j);
                                            if (grandSonNode.getNodeType() == Node.ELEMENT_NODE) {
                                                if (grandSonNode.getNodeName().toLowerCase().contains("uses-permission")) {
                                                    Element en = (Element) grandSonNode;
                                                    String value = en.getAttribute("android:name");
                                                    permissionList.add(value)
                                                    System.out.println(grandSonNode.getNodeName() + ": " + value);
                                                }
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    println('error msg: ' + e.getMessage())
                                }

                                //写入已经打开的文件
                                if (permissionList.size() != 0) {
                                    bufferedWriter.write(dependency.getAbsolutePath())
                                    bufferedWriter.write(',')
                                    for (String permission : permissionList) {
                                        bufferedWriter.write(permission)
                                        bufferedWriter.write(',')
                                    }
                                    bufferedWriter.write('\n')
                                }
                                xmlFile.delete()
                            }
                        }
                    }
                }
            }
            bufferedWriter.close()
        }
    }

}
